MethodError: Cannot `convert` an object of type Mamba.AbstractModelState{Mamba.SymDictVariateVals{Float64}} to an object of type Mamba.AbstractModelState{Mamba.DictVariateVals{Float64}}
This may have arisen from a call to the constructor Mamba.AbstractModelState{Mamba.DictVariateVals{Float64}}(...),
since type constructors fall back to convert methods.
copy!(::Array{Mamba.AbstractModelState{Mamba.DictVariateVals{Float64}},1}, ::Base.Generator{UnitRange{Int64},Mamba.##47#49{Array{Tuple{Mamba.Chains{Mamba.AbstractDictChainVal{Float64,2}},Mamba.AbstractModel{Mamba.DictVariateVals{Float64}},Mamba.AbstractModelState{Mamba.SymDictVariateVals{Float64}}},1}}}) at abstractarray.jl:574
collect(::Type{Mamba.AbstractModelState{Mamba.DictVariateVals{Float64}}}, ::Base.Generator{UnitRange{Int64},Mamba.##47#49{Array{Tuple{Mamba.Chains{Mamba.AbstractDictChainVal{Float64,2}},Mamba.AbstractModel{Mamba.DictVariateVals{Float64}},Mamba.AbstractModelState{Mamba.SymDictVariateVals{Float64}}},1}}}) at array.jl:360
mcmc_master!(::Mamba.AbstractModel{Mamba.DictVariateVals{Float64}}, ::UnitRange{Int64}, ::Int64, ::Int64, ::UnitRange{Int64}, ::Bool) at mcmc.jl:56
#mcmc#45(::Int64, ::Int64, ::Int64, ::Bool, ::Function, ::Mamba.AbstractModel{Mamba.DictVariateVals{Float64}}, ::Dict{Symbol,Any}, ::Array{Dict{Symbol,Any},1}, ::Int64) at mcmc.jl:32
(::Mamba.#kw##mcmc)(::Array{Any,1}, ::Mamba.#mcmc, ::Mamba.AbstractModel{Mamba.DictVariateVals{Float64}}, ::Dict{Symbol,Any}, ::Array{Dict{Symbol,Any},1}, ::Int64) at <missing>:0
include_string(::String, ::String) at loading.jl:515
include_string(::String, ::String, ::Int64) at eval.jl:30
include_string(::Module, ::String, ::String, ::Int64, ::Vararg{Int64,N} where N) at eval.jl:34
(::Atom.##49#52{String,Int64,String})() at eval.jl:50
withpath(::Atom.##49#52{String,Int64,String}, ::String) at utils.jl:30
withpath(::Function, ::String) at eval.jl:38
macro expansion at eval.jl:49 [inlined]
(::Atom.##48#51{Dict{String,Any}})() at task.jl:80
